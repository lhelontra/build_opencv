WORKDIR="sources/"
OPENCV_VERSION="3.4.0"

# 'all' for all cores / USE_CORES=1 - 1 processor, USE_CORES=2 - 2 processors ....
USE_CORES="all"

# checkinstall flags
CHECKINSTALL_INCLUDE_DOC="no"
CHECKINSTALL_PKGNAME="opencv"
CHECKINSTALL_PKGSRC="opencv"
CHECKINSTALL_PKGGROUP="opencv"
CHECKINSTALL_PKGALTSRC="opencv"
CHECKINSTALL_MANTAINER="lhe.lontra@gmail.com"
CHECKINSTALL_SUMMARY="computer vision & machine learning library."

PYTHON2_SUPPORT="ON"
PYTHON3_SUPPORT="ON"
CMAKE_INSTALL_PREFIX="/usr/local"

# cmake flags
FLAGS=""
FLAGS+=" -DCMAKE_BUILD_TYPE=RELEASE"
FLAGS+=" -DCMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX"
FLAGS+=" -DENABLE_PRECOMPILED_HEADERS=OFF"
FLAGS+=" -DOPENCV_ENABLE_NONFREE=ON"
FLAGS+=" -DCMAKE_CROSSCOMPILING=OFF"

# cross-compilation defines
CROSS_COMPILER="yes"
CROSSTOOL_URL="https://github.com/raspberrypi/tools/archive/0e906ebc527eab1cdbf7adabff5b474da9562e9f.tar.gz"
CROSSTOOL_DIR="tools-0e906ebc527eab1cdbf7adabff5b474da9562e9f/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/"
CROSSTOOL_NAME="arm-linux-gnueabihf"
CROSSTOOL_ARCH="armhf"
# if you use toolchain of raspberry pi, sets this flags is necessary why cmake try compile small example with -mthumb, causing fails.
CROSSTOOL_C_CXX_FLAGS="-march=armv6"
CROSSTOOL_CMAKE_TOOLCHAIN_FILE="platforms/linux/arm-gnueabi.toolchain.cmake"
EXTRA_CXX_FLAGS="-mtune=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard -ftree-vectorize -funsafe-math-optimizations -fomit-frame-pointer"
FLAGS+=" -DSOFTFP=OFF"

# hardware optimization
FLAGS+=" -DENABLE_NEON=OFF"
FLAGS+=" -DENABLE_VFPV3=OFF"
FLAGS+=" -D WITH_IPP=OFF"
FLAGS+=" -D WITH_ITT=OFF"
FLAGS+=" -D WITH_OPENVX=ON"
FLAGS+=" -D WITH_CAROTENE=ON"
FLAGS+=" -D ENABLE_FAST_MATH=ON"

# docs and examples
FLAGS+=" -D BUILD_DOCS=OFF"
FLAGS+=" -D BUILD_WITH_DYNAMIC_IPP=OFF"
FLAGS+=" -D INSTALL_PYTHON_EXAMPLES=OFF"
FLAGS+=" -D BUILD_TESTS=OFF"
FLAGS+=" -D BUILD_PERF_TESTS=OFF"
FLAGS+=" -D BUILD_EXAMPLES=OFF"

# Tuned Linear Algebra
FLAGS+=" -D WITH_EIGEN=ON"
FLAGS+=" -D WITH_LAPACK=OFF"

# gui support
FLAGS+=" -D WITH_OPENGL=OFF"
FLAGS+=" -D WITH_GTK=OFF"
FLAGS+=" -D WITH_QT=OFF"

# parallel supports
FLAGS+=" -D WITH_OPENMP=OFF"
FLAGS+=" -D WITH_TBB=ON"
FLAGS+=" -D BUILD_TBB=ON"

# image supports (builds with 3rdparty sources. Dont need install dev library)
FLAGS+=" -D BUILD_ZLIB=ON"
FLAGS+=" -D BUILD_PNG=ON"
FLAGS+=" -D BUILD_JPEG=ON"
FLAGS+=" -D BUILD_JASPER=ON"
FLAGS+=" -D BUILD_TIFF=ON"
FLAGS+=" -D BUILD_WEBP=ON"

# video i/o
# v4l1
FLAGS+=" -D WITH_LIBV4L=OFF"
# v4l2
FLAGS+=" -D WITH_V4L=ON"
# gstreamer
FLAGS+=" -D WITH_GSTREAMER=OFF"
FLAGS+=" -D WITH_FFMPEG=ON"
FLAGS+=" -D WITH_1394=OFF"

# opencl / cuda support
FLAGS+=" -D WITH_OPENCL=OFF"
FLAGS+=" -D WITH_OPENCLAMDBLAS=OFF"
FLAGS+=" -D WITH_OPENCL_SVM=OFF"
FLAGS+=" -D WITH_OPENCLAMDFFT=OFF"
FLAGS+=" -D WITH_CUDA=OFF"
FLAGS+=" -D WITH_CUFFT=OFF"
FLAGS+=" -D WITH_CUBLAS=OFF"
FLAGS+=" -D WITH_NVCUVID=OFF"
FLAGS+=" -D CUDA_FAST_MATH=OFF"
